---
- name: Pull PostgreSQL image
  docker_image:
    name: '{{ postgres_docker_image }}'
    tag: '{{ postgres_docker_image_tag }}'

- name: Create data container
  docker_container:
    name: '{{ postgres_container_name }}-data'
    image: '{{ postgres_docker_image }}:{{ postgres_docker_image_tag }}'
    state: present

- name: Run PostgreSQL container
  docker_container:
    name: '{{ postgres_container_name }}'
    image: '{{ postgres_docker_image }}:{{ postgres_docker_image_tag }}'
    restart_policy: always
    state: started
    memory: '{{ container_memory_limit | default(omit) }}'
    volumes_from:
      - '{{ postgres_container_name }}-data'
    ports:
      - '{{ postgres_port }}:5432'
    networks: '{{ postgres_networks }}'
  register: postgres_container

- name: Wait until PostgreSQL starts up
  wait_for: port={{ postgres_port }} delay=5
  when: postgres_container.changed

# install pg tools when on debian-based systems
- name: Ensure db client packages are installed (Debian/Ubuntu)
  apt: name={{item}} state=present
  with_items:
    - postgresql
    - libpq-dev
    - python-psycopg2
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# install pg tools when on Boot2Docker system
- name: Ensure db client packages are installed (Boot2Docker)
  block:
    - name: Install pg dev packages
      raw: tce-load -wi postgresql postgresql-dev
    - name: Install psycopg2
      pip:
        name: psycopg2
      become: true
  when: ansible_distribution == 'Boot2Docker'

- name: Create {{ postgres_user }} user
  postgresql_user: >
    name={{ postgres_user }}
    password={{ postgres_password }}
    role_attr_flags=CREATEDB,SUPERUSER,LOGIN
    login_host=localhost
    port={{ postgres_port }}
  when: postgres_user is defined and postgres_password is defined

- name: Check if database {{ postgres_database }} exists
  shell: psql -lqt -h 0.0.0.0 -U postgres | cut -d \| -f 1 | grep -qw {{ postgres_database }}
  register: db_exists
  failed_when: db_exists == 3

- name: Create {{ postgres_database }} database
  postgresql_db: >
    name={{ postgres_database }}
    owner={{ postgres_user }}
    login_host=localhost
    port={{ postgres_port }}
  when: postgres_database is defined and postgres_user is defined and db_exists.rc == 1

- name: Restore {{ postgres_database }} database from schema
  postgresql_db: >
    name={{ postgres_database }}
    owner={{ postgres_user }}
    login_host=localhost
    port={{ postgres_port }}
    target={{ postgres_schema }}
    state=restore
  when: postgres_database is defined and postgres_user is defined and postgres_schema is defined
